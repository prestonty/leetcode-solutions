class Solution {
public:
    int firstUniqChar(string s) {
        int lowestIndex = s.length(); // this is not a possible answer
        map<char, int> map;
        
        // make a hashmap that stores the indices of each unique char (-1 means not unique)
        for(int i = 0; i < s.length(); i++) {
            if(map.find(s[i]) == map.end()) {
                // not found; create new entry in hashmap
                map[s[i]] = i;
            } else {
                // duplicate found; change value to -1
                map[s[i]] = -1;
            }
        }

        // find lowestIndex from the map that is not -1
        for(const auto& entry : map) {
            if(entry.second < lowestIndex && entry.second != -1) {
                // set to the lowest non-negative index
                lowestIndex = entry.second;
            }
        }

        // if lowest index is still s.length(), this means none of the values worked, thus return -1
        if(lowestIndex == s.length()) {
            return -1;
        }
        return lowestIndex;
    }
};